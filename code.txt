

import java.io.File;
import java.io.FilenameFilter;
import java.nio.IntBuffer;

import static org.bytedeco.javacpp.opencv_core.CV_32SC1;
import static org.bytedeco.javacpp.opencv_core.CV_8UC1;
import static org.bytedeco.javacpp.opencv_imgcodecs.imread;
import static org.bytedeco.javacpp.opencv_imgcodecs.CV_LOAD_IMAGE_GRAYSCALE;

import org.bytedeco.javacpp.BytePointer;
import org.bytedeco.javacpp.IntPointer;
import org.bytedeco.javacpp.DoublePointer;
import org.bytedeco.javacpp.opencv_face.FaceRecognizer;
import org.bytedeco.javacpp.opencv_face.FisherFaceRecognizer;
import org.bytedeco.javacpp.opencv_face.EigenFaceRecognizer;
import org.bytedeco.javacpp.opencv_face.LBPHFaceRecognizer;
import org.bytedeco.javacpp.opencv_core.Mat;
import org.bytedeco.javacpp.opencv_core.MatVector;

// for webcam
import org.bytedeco.javacpp.opencv_videoio.VideoCapture;
import org.bytedeco.javacpp.opencv_imgcodecs;
import java.lang.InterruptedException;  
import org.bytedeco.javacpp.opencv_core.Mat;
import org.bytedeco.javacpp.opencv_core;
import org.bytedeco.javacpp.opencv_highgui;

import java.util.Scanner;
import java.io.FileWriter;
import java.io.IOException;
import java.io.FileReader;
import java.util.Arrays;

import java.util.Date;
public class LiterallyEverything {
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);       
        System.out.println("Enter number of classes");
        int numberofclasses = sc.nextInt();
        System.out.println("Add classes");
        String [] classes = new String[numberofclasses];
         classes[0] = sc.nextLine();
         for(int i = 0; i<numberofclasses;i++ ){
         classes[i]= sc.nextLine();
         System.out.println("ok");
         }
        System.out.println("Add number of students for each class in the order of added classes");
        int [] numofstds = new int[numberofclasses];
        int totalstds = 0;
       
        for(int l = 0; l<numberofclasses;l++){
             numofstds[l] = sc.nextInt();
             totalstds = totalstds + numofstds[l];
        }
        String [] names = new String[totalstds+1];
        
        System.out.println("ok");
        System.out.println("Add names of students for each class in the order of added classes");
        
        for(int i = 0;i<names.length;i++){
            names[i] = sc.nextLine();
        }
        System.out.println();
        System.out.print("[");
        for( String n : names){
           System.out.print(n + ", ");
        }
        System.out.print("]");
        
        Scanner input  = new Scanner(System.in);
        System.out.println("Enter the name of the class");
        String clas = input.nextLine();
         int indexOfClas = Arrays.asList(classes).indexOf(clas);
        
        String trainingDir = "/Users/rabeyanoor/Desktop/forcopyclass";
        
        String [] testImagepaths = new String[5];
        Mat [] testImage = new Mat[testImagepaths.length];
        String [] finalpresentnames = new String[testImagepaths.length];
       
        for(int i=0;i<5;i++){
         testImagepaths[i] = "/Users/rabeyanoor/NetBeansProjects/xx/s"+(i+1) +".jpg";
        }
        int testindex = 0;
        for(String testpath : testImagepaths){
        testImage[testindex] = imread(testpath, CV_LOAD_IMAGE_GRAYSCALE);
        testindex++;
        }
        //System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    	VideoCapture camera = new VideoCapture(0); //instatntiating object to capture frames from camera
    	
    	if (!camera.isOpened()) //if camera is not opened
        {
    		System.out.println("Error");
    	}
    	
        else 
        {
            Mat frame = new Mat(); // Object to store the frame that camera reads
    	    for (int c=1; c<=5; c++)
            {
    	    	if (camera.read(frame)) // Reading the next video frame from the camera 
                {
                    String imName = "s" + c;
                    opencv_imgcodecs.imwrite((imName+".jpg"), frame);
                    System.out.println(c +" image has been taken");
                    try 
                    {
                        Thread.sleep(100); //wait 2000 miliseconds
                    }    
                    catch(InterruptedException ex) 
                    {
                        Thread.currentThread().interrupt();
                    }       
    	    	}
    	    }	
    	}
    	camera.release();
        File root = new File(trainingDir);

        FilenameFilter imgFilter = new FilenameFilter() {
            public boolean accept(File dir, String name) {
                name = name.toLowerCase();
                return name.endsWith(".jpg") || name.endsWith(".pgm") || name.endsWith(".png");
            }
        };

        File[] imageFiles = root.listFiles(imgFilter);
        
        MatVector images = new MatVector(imageFiles.length);

        Mat labels = new Mat(imageFiles.length, 1, CV_32SC1);
        IntBuffer labelsBuf = labels.createBuffer();

        int counter = 0;
        //String [] subjects = {"","Hamna", "Noor","Shaheryar","Shifa Shariq","Muneeb Aijaz","Mahnoor"}; 
        String [] BESE = new String[names.length+1];
        System.out.println("error not here");
        BESE[0]= "";
        if (clas.contentEquals("BESE8B")){
            for(int o = 1; o<=5;o++){
            BESE[o] = names[o];
            }
        } 
        if(clas.contentEquals("BESE8A")){
        for(int o = 6; o<names.length;o++){
            BESE[o] = names[o];
            }
        }
            
        String [] absents = new String[names.length];
        for (File image : imageFiles) {
            Mat img = imread(image.getAbsolutePath(), CV_LOAD_IMAGE_GRAYSCALE);

            int label = Integer.parseInt(image.getName().split("\\-")[0]);
           // System.out.println(image);
           // System.out.println(label);
            images.put(counter, img);
           //System.out.println(img);
            labelsBuf.put(counter, label);

            counter++;
        }

         //FaceRecognizer faceRecognizer = FisherFaceRecognizer.create();
         //FaceRecognizer faceRecognizer = EigenFaceRecognizer.create();
         FaceRecognizer faceRecognizer = LBPHFaceRecognizer.create();

        faceRecognizer.train(images, labels);

        IntPointer label = new IntPointer(1);
        DoublePointer confidence = new DoublePointer(1);
        int numberofnames = 0;
        for(Mat test : testImage){
        faceRecognizer.predict(test, label, confidence);
        int predictedLabel = label.get(0);
        double predictedconf = confidence.get(0);
        if(predictedconf<60){
        String name = BESE[predictedLabel];
        System.out.println("Predicted label: " + name + " "+ predictedconf);
        finalpresentnames[numberofnames] = name;
        }
        else{
             System.out.println("No face detected");
        }
        numberofnames++;       
        }
        
       // System.out.println("Enter the name of the file to save data: ");       
        Date d = new Date();
        String date =  Integer.toString(d.getDate()) +"."+  Integer.toString(d.getDay()) +"."+  Integer.toString(d.getYear());
        //String filename  = input.nextLine();
        
        File f = new File( "/Users/rabeyanoor/NetBeansProjects/xx/Attendance/"+date + ".txt");
        
            try {
                FileWriter fw = new FileWriter(f,true);
                FileReader fr = new FileReader(f);
                
                
                for(int y = 0; y<finalpresentnames.length;y++){
                    for(int z = 0; z<BESE.length;z++){
                    if(finalpresentnames[y]== BESE[z])
                        continue;
                    else
                       absents[z] = BESE[z];  
                    
                }
                }
                // a match!
                fw.write("Class: " + clas +"\n");
                fw.write("Present:\n");
                
                for(String n: finalpresentnames){
                    
                    fw.write(n + " is present\n");
                }
                fw.write("\n\nAbsent:\n");
                for(String a : absents){
                   if(a != null)
                       fw.write(a + " is absent\n");
                   else 
                       continue;
                }
                fw.close();
                
                
            } catch (IOException ex) {
                System.err.println("Error " + ex + " occured");
            }
       
    
    
    }
    
}
